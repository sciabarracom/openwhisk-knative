// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for OpenWhisk",
    "title": "OpenWhisk REST API",
    "version": "0.1.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/namespaces": {
      "get": {
        "description": "Get all namespaces for authenticated user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "Get all namespaces for authenticated user",
        "operationId": "getAllNamespaces",
        "responses": {
          "200": {
            "description": "Array of namespaces",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/actions": {
      "get": {
        "description": "Get all actions",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Get all actions",
        "operationId": "getAllActions",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of entities to include in the result (0-200). The default limit is 30. A value of 0 sets the limit to the maximum.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to skip in the result.",
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Actions response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/actions/{actionName}": {
      "get": {
        "description": "Get action information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Get action information",
        "operationId": "getActionByName",
        "parameters": [
          {
            "type": "boolean",
            "description": "Include action code in the result",
            "name": "code",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned action",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "put": {
        "description": "Create or update an action",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Create or update an action",
        "operationId": "updateAction",
        "parameters": [
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Overwrite item if it exists. Default is false.",
            "name": "overwrite",
            "in": "query"
          },
          {
            "description": "The action being updated",
            "name": "action",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Action",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "description": "Invoke an action",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Invoke an action",
        "operationId": "invokeAction",
        "parameters": [
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Blocking or non-blocking invocation. Default is non-blocking.",
            "name": "blocking",
            "in": "query"
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Return only the result of a blocking activation. Default is false.",
            "name": "result",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Wait no more than specified duration in milliseconds for a blocking response. Default value and max allowed timeout are 60000.",
            "name": "timeout",
            "in": "query"
          },
          {
            "description": "The parameters for the action being invoked",
            "name": "payload",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful activation"
          },
          "202": {
            "$ref": "#/responses/AcceptedActivation"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "408": {
            "$ref": "#/responses/Timeout"
          },
          "429": {
            "$ref": "#/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          },
          "502": {
            "description": "Activation produced an application error"
          }
        }
      },
      "delete": {
        "description": "Delete an action",
        "tags": [
          "Actions"
        ],
        "summary": "Delete an action",
        "operationId": "deleteAction",
        "responses": {
          "200": {
            "$ref": "#/responses/DeletedItem"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The entity namespace",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of action to fetch",
          "name": "actionName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/namespaces/{namespace}/actions/{packageName}/{actionName}": {
      "get": {
        "description": "Get action information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Get action information",
        "operationId": "getActionInPackageByName",
        "parameters": [
          {
            "type": "boolean",
            "description": "Include action code in the result",
            "name": "code",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned action",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "put": {
        "description": "Create or update an action",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Create or update an action",
        "operationId": "updateActionInPackage",
        "parameters": [
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Overwrite item if it exists. Default is false.",
            "name": "overwrite",
            "in": "query"
          },
          {
            "description": "The action being updated",
            "name": "action",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Action",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "description": "Invoke an action",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Invoke an action",
        "operationId": "invokeActionInPackage",
        "parameters": [
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Blocking or non-blocking invocation. Default is non-blocking.",
            "name": "blocking",
            "in": "query"
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Return only the result of a blocking activation. Default is false.",
            "name": "result",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Wait no more than specified duration in milliseconds for a blocking response. Default value and max allowed timeout are 60000.",
            "name": "timeout",
            "in": "query"
          },
          {
            "description": "The parameters for the action being invoked",
            "name": "payload",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful activation"
          },
          "202": {
            "$ref": "#/responses/AcceptedActivation"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "408": {
            "$ref": "#/responses/Timeout"
          },
          "429": {
            "$ref": "#/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          },
          "502": {
            "description": "Activation produced an application error"
          }
        }
      },
      "delete": {
        "description": "Delete an action",
        "tags": [
          "Actions"
        ],
        "summary": "Delete an action",
        "operationId": "deleteActionInPackage",
        "responses": {
          "200": {
            "$ref": "#/responses/DeletedItem"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The entity namespace",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of package that contains action",
          "name": "packageName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of action to fetch",
          "name": "actionName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/namespaces/{namespace}/activations": {
      "get": {
        "description": "Get activation summary.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activations"
        ],
        "summary": "Get activation summary",
        "operationId": "getActivations",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of item",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to include in the result (0-200). The default limit is 30. A value of 0 sets the limit to the maximum.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to skip in the result.",
            "name": "skip",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Only include entities later than this timestamp (measured in milliseconds since Thu, 01 Jan 1970)",
            "name": "since",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Only include entities earlier than this timestamp (measured in milliseconds since Thu, 01 Jan 1970)",
            "name": "upto",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether to include full entity description.",
            "name": "docs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Activations response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivationBrief"
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/activations/{activationid}": {
      "get": {
        "description": "Get activation information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activations"
        ],
        "summary": "Get activation information",
        "operationId": "getActivationById",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of activation to fetch",
            "name": "activationid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return output",
            "schema": {
              "$ref": "#/definitions/Activation"
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/activations/{activationid}/logs": {
      "get": {
        "description": "Get activation logs information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activations"
        ],
        "summary": "Get the logs for an activation",
        "operationId": "getActivationLogs",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of activation to fetch",
            "name": "activationid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return output",
            "schema": {
              "$ref": "#/definitions/ActivationLogs"
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/activations/{activationid}/result": {
      "get": {
        "description": "Get activation result.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activations"
        ],
        "summary": "Get the result of an activation",
        "operationId": "getActivationResult",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of activation to fetch",
            "name": "activationid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return output",
            "schema": {
              "$ref": "#/definitions/ActivationResult"
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/packages": {
      "get": {
        "description": "Get all packages",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Packages"
        ],
        "summary": "Get all packages",
        "operationId": "getAllPackages",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Include publicly shared entitles in the result.",
            "name": "public",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to include in the result (0-200). The default limit is 30. A value of 0 sets the limit to the maximum.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to skip in the result.",
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Packages response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Package"
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/packages/{packageName}": {
      "get": {
        "description": "Get package information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Packages"
        ],
        "summary": "Get package information",
        "operationId": "getPackageByName",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of package to fetch",
            "name": "packageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned package",
            "schema": {
              "$ref": "#/definitions/Package"
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "put": {
        "description": "Create or update a package",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Packages"
        ],
        "summary": "Create or update a package",
        "operationId": "updatePackage",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of package",
            "name": "packageName",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Overwrite item if it exists. Default is false.",
            "name": "overwrite",
            "in": "query"
          },
          {
            "description": "The package being updated",
            "name": "package",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PackagePut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Package",
            "schema": {
              "$ref": "#/definitions/Package"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "403": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "delete": {
        "description": "Delete a package",
        "tags": [
          "Packages"
        ],
        "summary": "Delete a package",
        "operationId": "deletePackage",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of package",
            "name": "packageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeletedItem"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/rules": {
      "get": {
        "description": "Get all rules",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rules"
        ],
        "summary": "Get all rules",
        "operationId": "getAllRules",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of entities to include in the result (0-200). The default limit is 30. A value of 0 sets the limit to the maximum.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to skip in the result.",
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Rule"
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/rules/{ruleName}": {
      "get": {
        "description": "Get rule information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rules"
        ],
        "summary": "Get rule information",
        "operationId": "getRuleByName",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of rule to fetch",
            "name": "ruleName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned rule",
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "put": {
        "description": "Create or update a rule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rules"
        ],
        "summary": "Create or update a rule",
        "operationId": "updateRule",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of rule to update",
            "name": "ruleName",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Overwrite item if it exists. Default is false.",
            "name": "overwrite",
            "in": "query"
          },
          {
            "description": "The rule being updated",
            "name": "rule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RulePut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated rule",
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "description": "Enable or disable a rule",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "tags": [
          "Rules"
        ],
        "summary": "Enable or disable a rule",
        "operationId": "setState",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of rule to update",
            "name": "ruleName",
            "in": "path",
            "required": true
          },
          {
            "description": "Set status to active or inactive",
            "name": "status",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "inactive",
                    "active"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AcceptedRuleStateChange"
          },
          "202": {
            "$ref": "#/responses/AcceptedRuleStateChange"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "delete": {
        "description": "Delete a rule",
        "tags": [
          "Rules"
        ],
        "summary": "Delete a rule",
        "operationId": "deleteRule",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of rule to delete",
            "name": "ruleName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeletedItem"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/triggers": {
      "get": {
        "description": "Get all triggers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Triggers"
        ],
        "summary": "Get all triggers",
        "operationId": "getAllTriggers",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of entities to include in the result (0-200). The default limit is 30. A value of 0 sets the limit to the maximum.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to skip in the result.",
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Triggers response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trigger"
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/namespaces/{namespace}/triggers/{triggerName}": {
      "get": {
        "description": "Get trigger information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Triggers"
        ],
        "summary": "Get trigger information",
        "operationId": "getTriggerByName",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of trigger to fetch",
            "name": "triggerName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned trigger",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "put": {
        "description": "Create or update a trigger",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Triggers"
        ],
        "summary": "Create or update a trigger",
        "operationId": "updateTrigger",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of trigger to update",
            "name": "triggerName",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Overwrite item if it exists. Default is false.",
            "name": "overwrite",
            "in": "query"
          },
          {
            "description": "The trigger being updated",
            "name": "trigger",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TriggerPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated trigger",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "description": "Fire a trigger",
        "tags": [
          "Triggers"
        ],
        "summary": "Fire a trigger",
        "operationId": "fireTrigger",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of trigger being fired",
            "name": "triggerName",
            "in": "path",
            "required": true
          },
          {
            "description": "The trigger payload",
            "name": "payload",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Activation id",
            "schema": {
              "$ref": "#/definitions/ActivationId"
            }
          },
          "204": {
            "$ref": "#/responses/NoActiveRules"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "408": {
            "$ref": "#/responses/Timeout"
          },
          "429": {
            "$ref": "#/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "delete": {
        "description": "Delete a trigger",
        "tags": [
          "Triggers"
        ],
        "summary": "Delete a trigger",
        "operationId": "deleteTrigger",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of trigger to delete",
            "name": "triggerName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeletedItem"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedRequest"
          },
          "404": {
            "$ref": "#/responses/ItemNotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/web/{namespace}/{packageName}/{actionName}.{extension}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "responses": {
          "default": {
            "description": "any response",
            "schema": {}
          }
        }
      },
      "put": {
        "tags": [
          "Actions"
        ],
        "responses": {
          "default": {
            "description": "any response",
            "schema": {}
          }
        }
      },
      "post": {
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "description": "The parameters for the action being invoked",
            "name": "payload",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "any response",
            "schema": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Actions"
        ],
        "responses": {
          "default": {
            "description": "any response",
            "schema": {}
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "packageName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "actionName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "extension",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Action": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish",
        "exec",
        "limits"
      ],
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "exec": {
          "$ref": "#/definitions/ActionExec"
        },
        "limits": {
          "$ref": "#/definitions/ActionLimits"
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings included in the context passed to the action",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "updated": {
          "description": "Time when the action was updated",
          "type": "integer"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ActionExec": {
      "description": "definition of the action, such as javascript code or the name of a container",
      "properties": {
        "binary": {
          "description": "Whether the action has a binary attachment or not. This attribute is ignored when creating or updating an action.",
          "type": "boolean"
        },
        "code": {
          "description": "The code to execute when kind is not 'blackbox'",
          "type": "string"
        },
        "components": {
          "description": "For sequence actions, the individual action components",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "image": {
          "description": "container image name when kind is 'blackbox'",
          "type": "string"
        },
        "kind": {
          "description": "the type of action",
          "type": "string",
          "enum": [
            "blackbox",
            "java",
            "java:default",
            "nodejs:6",
            "nodejs:8",
            "nodejs:10",
            "nodejs:12",
            "nodejs:default",
            "php:7.3",
            "php:default",
            "python:2",
            "python:3",
            "python:default",
            "ruby:2.5",
            "ruby:default",
            "go:1.11",
            "go:default",
            "sequence",
            "swift:4.2",
            "swift:default",
            "dotnet:2.2",
            "dotnet:default",
            "ballerina:0.990",
            "ballerina:default"
          ]
        },
        "main": {
          "description": "main entrypoint of the action code",
          "type": "string"
        }
      }
    },
    "ActionLimits": {
      "description": "Limits on a specific action",
      "properties": {
        "concurrency": {
          "description": "number of concurrent activations allowed",
          "type": "integer",
          "format": "int32",
          "default": 1
        },
        "logs": {
          "description": "log size in megabytes",
          "type": "integer",
          "format": "int32",
          "default": 10
        },
        "memory": {
          "description": "memory in megabytes",
          "type": "integer",
          "format": "int32",
          "default": 256
        },
        "timeout": {
          "description": "timeout in milliseconds",
          "type": "integer",
          "format": "int32",
          "default": 60000
        }
      }
    },
    "ActionPayload": {
      "required": [
        "payload"
      ],
      "properties": {
        "payload": {
          "description": "The payload to pass to the action.",
          "type": "string"
        }
      }
    },
    "ActionPut": {
      "description": "A restricted Action view used when updating an Action",
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "exec": {
          "$ref": "#/definitions/ActionExec"
        },
        "limits": {
          "$ref": "#/definitions/ActionLimits"
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings included in the context passed to the action",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Activation": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish",
        "subject",
        "activationId",
        "start",
        "response",
        "logs"
      ],
      "properties": {
        "activationId": {
          "description": "Id of the activation",
          "type": "string"
        },
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "cause": {
          "description": "the activation id that caused this activation",
          "type": "string"
        },
        "duration": {
          "description": "How long the invocation took, in millisecnods",
          "type": "integer"
        },
        "end": {
          "description": "Time when the activation completed",
          "type": "integer"
        },
        "logs": {
          "description": "Logs generated by the activation",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of the item",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the associated item",
          "type": "string"
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "response": {
          "$ref": "#/definitions/ActivationResult"
        },
        "start": {
          "description": "Time when the activation began",
          "type": "integer"
        },
        "statusCode": {
          "description": "The status code",
          "type": "integer",
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ]
        },
        "subject": {
          "description": "The subject that activated the item",
          "type": "string"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string"
        }
      }
    },
    "ActivationBrief": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish",
        "activationId",
        "start"
      ],
      "properties": {
        "activationId": {
          "description": "Id of the activation",
          "type": "string"
        },
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "cause": {
          "description": "the activation id that caused this activation",
          "type": "string"
        },
        "duration": {
          "description": "How long the invocation took, in millisecnods",
          "type": "integer"
        },
        "end": {
          "description": "Time when the activation completed",
          "type": "integer"
        },
        "name": {
          "description": "Name of the item",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the associated item",
          "type": "string"
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "start": {
          "description": "Time when the activation began",
          "type": "integer"
        },
        "statusCode": {
          "description": "The status code",
          "type": "integer",
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ]
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string"
        }
      }
    },
    "ActivationId": {
      "required": [
        "activationId"
      ],
      "properties": {
        "activationId": {
          "type": "string"
        }
      }
    },
    "ActivationIds": {
      "properties": {
        "ids": {
          "description": "Array of activation ids",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivationId"
          }
        }
      }
    },
    "ActivationInfo": {
      "properties": {
        "id": {
          "description": "Activation id",
          "type": "string",
          "minLength": 1
        },
        "result": {
          "description": "Activation result",
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "type": "string"
            }
          }
        },
        "stderr": {
          "description": "Standard error from activation",
          "type": "string"
        },
        "stdout": {
          "description": "Standard output from activation",
          "type": "string"
        }
      }
    },
    "ActivationLogs": {
      "properties": {
        "logs": {
          "description": "Interleaved standard output and error of an activation",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ActivationResult": {
      "properties": {
        "result": {
          "description": "The return value from the activation"
        },
        "status": {
          "description": "Exit status of the activation",
          "type": "string"
        },
        "success": {
          "description": "Whether the activation was successful or not",
          "type": "boolean"
        }
      }
    },
    "ActivationStderr": {
      "properties": {
        "stderr": {
          "description": "Standard error of an activation",
          "type": "string"
        }
      }
    },
    "EntityBrief": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish"
      ],
      "properties": {
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ErrorMessage": {
      "required": [
        "error"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "ItemId": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "KeyValue": {
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "description": "Any JSON value"
        }
      }
    },
    "Package": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish"
      ],
      "properties": {
        "actions": {
          "description": "Actions contained in this package",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageAction"
          }
        },
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "binding": {
          "$ref": "#/definitions/PackageBinding"
        },
        "feeds": {
          "description": "Feeds contained in this package",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter for the package",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "updated": {
          "description": "Time when the package was updated",
          "type": "integer"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "PackageAction": {
      "description": "A restricted Action view used when listing actions in a package",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings included in the context passed to the action",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "PackageBinding": {
      "properties": {
        "name": {
          "description": "Name of the item",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string"
        }
      }
    },
    "PackagePut": {
      "description": "A restricted Package view used when updating a Package",
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "binding": {
          "$ref": "#/definitions/PackageBinding"
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter for the package",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "PathName": {
      "required": [
        "path",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "Provider": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the provider",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings included in the context passed to the provider",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the provider or not",
          "type": "boolean"
        }
      }
    },
    "ProviderAction": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the action",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ProviderBinding": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the binding",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ProviderTrigger": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the trigger",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Rule": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish",
        "trigger",
        "action"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/PathName"
        },
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "status": {
          "description": "Status of a rule",
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "activating",
            "deactivating"
          ]
        },
        "trigger": {
          "$ref": "#/definitions/PathName"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "RulePut": {
      "description": "A restricted Rule view used when updating a Rule",
      "properties": {
        "action": {
          "description": "Name of the action",
          "type": "string",
          "minLength": 1
        },
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "status": {
          "description": "Status of a rule",
          "type": "string",
          "enum": [
            "active",
            "inactive",
            ""
          ]
        },
        "trigger": {
          "description": "Name of the trigger",
          "type": "string",
          "minLength": 1
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Trigger": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish"
      ],
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "limits": {
          "$ref": "#/definitions/TriggerLimits"
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings for the trigger",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "rules": {
          "description": "rules associated with the trigger",
          "type": "object"
        },
        "updated": {
          "description": "Time when the trigger was updated",
          "type": "integer"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "TriggerLimits": {
      "description": "Limits on a specific trigger",
      "type": "object"
    },
    "TriggerPayload": {
      "required": [
        "payload"
      ],
      "properties": {
        "payload": {
          "description": "The payload of the trigger event.",
          "type": "string"
        }
      }
    },
    "TriggerPut": {
      "description": "A restricted Trigger view used when updating the Trigger",
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "limits": {
          "$ref": "#/definitions/TriggerLimits"
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings included in the context passed to the trigger",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    }
  },
  "responses": {
    "AcceptedActivation": {
      "description": "Accepted activation request",
      "schema": {
        "$ref": "#/definitions/ActivationId"
      }
    },
    "AcceptedRuleStateChange": {
      "description": "Rule has been enabled or disabled"
    },
    "AddedItem": {
      "description": "Added Item",
      "schema": {
        "$ref": "#/definitions/ItemId"
      }
    },
    "BadRequest": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "Conflict": {
      "description": "Conflicting item already exists",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "DeletedItem": {
      "description": "Deleted Item"
    },
    "ItemNotFound": {
      "description": "Item not found",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "NoActiveRules": {
      "description": "Trigger has no active rules"
    },
    "RequestEntityTooLarge": {
      "description": "Request entity too large",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "ServerError": {
      "description": "Server error",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "Timeout": {
      "description": "Request timed out"
    },
    "TooManyRequests": {
      "description": "Too many requests in a given time period"
    },
    "UnauthorizedRequest": {
      "description": "Unauthorized request",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "UpdatedItem": {
      "description": "Updated Item",
      "schema": {
        "$ref": "#/definitions/ItemId"
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": null
    }
  ],
  "tags": [
    {
      "name": "Actions"
    },
    {
      "name": "Rules"
    },
    {
      "name": "Triggers"
    },
    {
      "name": "Activations"
    },
    {
      "name": "Packages"
    },
    {
      "name": "Namespaces"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for OpenWhisk",
    "title": "OpenWhisk REST API",
    "version": "0.1.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/namespaces": {
      "get": {
        "description": "Get all namespaces for authenticated user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaces"
        ],
        "summary": "Get all namespaces for authenticated user",
        "operationId": "getAllNamespaces",
        "responses": {
          "200": {
            "description": "Array of namespaces",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/actions": {
      "get": {
        "description": "Get all actions",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Get all actions",
        "operationId": "getAllActions",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of entities to include in the result (0-200). The default limit is 30. A value of 0 sets the limit to the maximum.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to skip in the result.",
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Actions response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Action"
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/actions/{actionName}": {
      "get": {
        "description": "Get action information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Get action information",
        "operationId": "getActionByName",
        "parameters": [
          {
            "type": "boolean",
            "description": "Include action code in the result",
            "name": "code",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned action",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "put": {
        "description": "Create or update an action",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Create or update an action",
        "operationId": "updateAction",
        "parameters": [
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Overwrite item if it exists. Default is false.",
            "name": "overwrite",
            "in": "query"
          },
          {
            "description": "The action being updated",
            "name": "action",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Action",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflicting item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "413": {
            "description": "Request entity too large",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "post": {
        "description": "Invoke an action",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Invoke an action",
        "operationId": "invokeAction",
        "parameters": [
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Blocking or non-blocking invocation. Default is non-blocking.",
            "name": "blocking",
            "in": "query"
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Return only the result of a blocking activation. Default is false.",
            "name": "result",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Wait no more than specified duration in milliseconds for a blocking response. Default value and max allowed timeout are 60000.",
            "name": "timeout",
            "in": "query"
          },
          {
            "description": "The parameters for the action being invoked",
            "name": "payload",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful activation"
          },
          "202": {
            "description": "Accepted activation request",
            "schema": {
              "$ref": "#/definitions/ActivationId"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "408": {
            "description": "Request timed out"
          },
          "429": {
            "description": "Too many requests in a given time period"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "502": {
            "description": "Activation produced an application error"
          }
        }
      },
      "delete": {
        "description": "Delete an action",
        "tags": [
          "Actions"
        ],
        "summary": "Delete an action",
        "operationId": "deleteAction",
        "responses": {
          "200": {
            "description": "Deleted Item"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflicting item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The entity namespace",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of action to fetch",
          "name": "actionName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/namespaces/{namespace}/actions/{packageName}/{actionName}": {
      "get": {
        "description": "Get action information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Get action information",
        "operationId": "getActionInPackageByName",
        "parameters": [
          {
            "type": "boolean",
            "description": "Include action code in the result",
            "name": "code",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned action",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "put": {
        "description": "Create or update an action",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Create or update an action",
        "operationId": "updateActionInPackage",
        "parameters": [
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Overwrite item if it exists. Default is false.",
            "name": "overwrite",
            "in": "query"
          },
          {
            "description": "The action being updated",
            "name": "action",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActionPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Action",
            "schema": {
              "$ref": "#/definitions/Action"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflicting item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "413": {
            "description": "Request entity too large",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "post": {
        "description": "Invoke an action",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Actions"
        ],
        "summary": "Invoke an action",
        "operationId": "invokeActionInPackage",
        "parameters": [
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Blocking or non-blocking invocation. Default is non-blocking.",
            "name": "blocking",
            "in": "query"
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Return only the result of a blocking activation. Default is false.",
            "name": "result",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Wait no more than specified duration in milliseconds for a blocking response. Default value and max allowed timeout are 60000.",
            "name": "timeout",
            "in": "query"
          },
          {
            "description": "The parameters for the action being invoked",
            "name": "payload",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful activation"
          },
          "202": {
            "description": "Accepted activation request",
            "schema": {
              "$ref": "#/definitions/ActivationId"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "408": {
            "description": "Request timed out"
          },
          "429": {
            "description": "Too many requests in a given time period"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "502": {
            "description": "Activation produced an application error"
          }
        }
      },
      "delete": {
        "description": "Delete an action",
        "tags": [
          "Actions"
        ],
        "summary": "Delete an action",
        "operationId": "deleteActionInPackage",
        "responses": {
          "200": {
            "description": "Deleted Item"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflicting item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "The entity namespace",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of package that contains action",
          "name": "packageName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of action to fetch",
          "name": "actionName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/namespaces/{namespace}/activations": {
      "get": {
        "description": "Get activation summary.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activations"
        ],
        "summary": "Get activation summary",
        "operationId": "getActivations",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of item",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to include in the result (0-200). The default limit is 30. A value of 0 sets the limit to the maximum.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to skip in the result.",
            "name": "skip",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Only include entities later than this timestamp (measured in milliseconds since Thu, 01 Jan 1970)",
            "name": "since",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Only include entities earlier than this timestamp (measured in milliseconds since Thu, 01 Jan 1970)",
            "name": "upto",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether to include full entity description.",
            "name": "docs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Activations response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivationBrief"
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/activations/{activationid}": {
      "get": {
        "description": "Get activation information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activations"
        ],
        "summary": "Get activation information",
        "operationId": "getActivationById",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of activation to fetch",
            "name": "activationid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return output",
            "schema": {
              "$ref": "#/definitions/Activation"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/activations/{activationid}/logs": {
      "get": {
        "description": "Get activation logs information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activations"
        ],
        "summary": "Get the logs for an activation",
        "operationId": "getActivationLogs",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of activation to fetch",
            "name": "activationid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return output",
            "schema": {
              "$ref": "#/definitions/ActivationLogs"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/activations/{activationid}/result": {
      "get": {
        "description": "Get activation result.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Activations"
        ],
        "summary": "Get the result of an activation",
        "operationId": "getActivationResult",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of activation to fetch",
            "name": "activationid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return output",
            "schema": {
              "$ref": "#/definitions/ActivationResult"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/packages": {
      "get": {
        "description": "Get all packages",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Packages"
        ],
        "summary": "Get all packages",
        "operationId": "getAllPackages",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Include publicly shared entitles in the result.",
            "name": "public",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to include in the result (0-200). The default limit is 30. A value of 0 sets the limit to the maximum.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to skip in the result.",
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Packages response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Package"
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/packages/{packageName}": {
      "get": {
        "description": "Get package information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Packages"
        ],
        "summary": "Get package information",
        "operationId": "getPackageByName",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of package to fetch",
            "name": "packageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned package",
            "schema": {
              "$ref": "#/definitions/Package"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflicting item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "put": {
        "description": "Create or update a package",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Packages"
        ],
        "summary": "Create or update a package",
        "operationId": "updatePackage",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of package",
            "name": "packageName",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Overwrite item if it exists. Default is false.",
            "name": "overwrite",
            "in": "query"
          },
          {
            "description": "The package being updated",
            "name": "package",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PackagePut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Package",
            "schema": {
              "$ref": "#/definitions/Package"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflicting item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "413": {
            "description": "Request entity too large",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a package",
        "tags": [
          "Packages"
        ],
        "summary": "Delete a package",
        "operationId": "deletePackage",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of package",
            "name": "packageName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted Item"
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflicting item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/rules": {
      "get": {
        "description": "Get all rules",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rules"
        ],
        "summary": "Get all rules",
        "operationId": "getAllRules",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of entities to include in the result (0-200). The default limit is 30. A value of 0 sets the limit to the maximum.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to skip in the result.",
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Rule"
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/rules/{ruleName}": {
      "get": {
        "description": "Get rule information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rules"
        ],
        "summary": "Get rule information",
        "operationId": "getRuleByName",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of rule to fetch",
            "name": "ruleName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned rule",
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "put": {
        "description": "Create or update a rule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rules"
        ],
        "summary": "Create or update a rule",
        "operationId": "updateRule",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of rule to update",
            "name": "ruleName",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Overwrite item if it exists. Default is false.",
            "name": "overwrite",
            "in": "query"
          },
          {
            "description": "The rule being updated",
            "name": "rule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RulePut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated rule",
            "schema": {
              "$ref": "#/definitions/Rule"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflicting item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "413": {
            "description": "Request entity too large",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "post": {
        "description": "Enable or disable a rule",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "tags": [
          "Rules"
        ],
        "summary": "Enable or disable a rule",
        "operationId": "setState",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of rule to update",
            "name": "ruleName",
            "in": "path",
            "required": true
          },
          {
            "description": "Set status to active or inactive",
            "name": "status",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "inactive",
                    "active"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rule has been enabled or disabled"
          },
          "202": {
            "description": "Rule has been enabled or disabled"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a rule",
        "tags": [
          "Rules"
        ],
        "summary": "Delete a rule",
        "operationId": "deleteRule",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of rule to delete",
            "name": "ruleName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted Item"
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/triggers": {
      "get": {
        "description": "Get all triggers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Triggers"
        ],
        "summary": "Get all triggers",
        "operationId": "getAllTriggers",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of entities to include in the result (0-200). The default limit is 30. A value of 0 sets the limit to the maximum.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of entities to skip in the result.",
            "name": "skip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Triggers response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trigger"
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/triggers/{triggerName}": {
      "get": {
        "description": "Get trigger information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Triggers"
        ],
        "summary": "Get trigger information",
        "operationId": "getTriggerByName",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of trigger to fetch",
            "name": "triggerName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned trigger",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "put": {
        "description": "Create or update a trigger",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Triggers"
        ],
        "summary": "Create or update a trigger",
        "operationId": "updateTrigger",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of trigger to update",
            "name": "triggerName",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "type": "string",
            "description": "Overwrite item if it exists. Default is false.",
            "name": "overwrite",
            "in": "query"
          },
          {
            "description": "The trigger being updated",
            "name": "trigger",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TriggerPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated trigger",
            "schema": {
              "$ref": "#/definitions/Trigger"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflicting item already exists",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "413": {
            "description": "Request entity too large",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "post": {
        "description": "Fire a trigger",
        "tags": [
          "Triggers"
        ],
        "summary": "Fire a trigger",
        "operationId": "fireTrigger",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of trigger being fired",
            "name": "triggerName",
            "in": "path",
            "required": true
          },
          {
            "description": "The trigger payload",
            "name": "payload",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Activation id",
            "schema": {
              "$ref": "#/definitions/ActivationId"
            }
          },
          "204": {
            "description": "Trigger has no active rules"
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "408": {
            "description": "Request timed out"
          },
          "429": {
            "description": "Too many requests in a given time period"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a trigger",
        "tags": [
          "Triggers"
        ],
        "summary": "Delete a trigger",
        "operationId": "deleteTrigger",
        "parameters": [
          {
            "type": "string",
            "description": "The entity namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of trigger to delete",
            "name": "triggerName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted Item"
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/web/{namespace}/{packageName}/{actionName}.{extension}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "responses": {
          "default": {
            "description": "any response",
            "schema": {}
          }
        }
      },
      "put": {
        "tags": [
          "Actions"
        ],
        "responses": {
          "default": {
            "description": "any response",
            "schema": {}
          }
        }
      },
      "post": {
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "description": "The parameters for the action being invoked",
            "name": "payload",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "any response",
            "schema": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Actions"
        ],
        "responses": {
          "default": {
            "description": "any response",
            "schema": {}
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "packageName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "actionName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "extension",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Action": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish",
        "exec",
        "limits"
      ],
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "exec": {
          "$ref": "#/definitions/ActionExec"
        },
        "limits": {
          "$ref": "#/definitions/ActionLimits"
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings included in the context passed to the action",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "updated": {
          "description": "Time when the action was updated",
          "type": "integer"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ActionExec": {
      "description": "definition of the action, such as javascript code or the name of a container",
      "properties": {
        "binary": {
          "description": "Whether the action has a binary attachment or not. This attribute is ignored when creating or updating an action.",
          "type": "boolean"
        },
        "code": {
          "description": "The code to execute when kind is not 'blackbox'",
          "type": "string"
        },
        "components": {
          "description": "For sequence actions, the individual action components",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "image": {
          "description": "container image name when kind is 'blackbox'",
          "type": "string"
        },
        "kind": {
          "description": "the type of action",
          "type": "string",
          "enum": [
            "blackbox",
            "java",
            "java:default",
            "nodejs:6",
            "nodejs:8",
            "nodejs:10",
            "nodejs:12",
            "nodejs:default",
            "php:7.3",
            "php:default",
            "python:2",
            "python:3",
            "python:default",
            "ruby:2.5",
            "ruby:default",
            "go:1.11",
            "go:default",
            "sequence",
            "swift:4.2",
            "swift:default",
            "dotnet:2.2",
            "dotnet:default",
            "ballerina:0.990",
            "ballerina:default"
          ]
        },
        "main": {
          "description": "main entrypoint of the action code",
          "type": "string"
        }
      }
    },
    "ActionLimits": {
      "description": "Limits on a specific action",
      "properties": {
        "concurrency": {
          "description": "number of concurrent activations allowed",
          "type": "integer",
          "format": "int32",
          "default": 1
        },
        "logs": {
          "description": "log size in megabytes",
          "type": "integer",
          "format": "int32",
          "default": 10
        },
        "memory": {
          "description": "memory in megabytes",
          "type": "integer",
          "format": "int32",
          "default": 256
        },
        "timeout": {
          "description": "timeout in milliseconds",
          "type": "integer",
          "format": "int32",
          "default": 60000
        }
      }
    },
    "ActionPayload": {
      "required": [
        "payload"
      ],
      "properties": {
        "payload": {
          "description": "The payload to pass to the action.",
          "type": "string"
        }
      }
    },
    "ActionPut": {
      "description": "A restricted Action view used when updating an Action",
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "exec": {
          "$ref": "#/definitions/ActionExec"
        },
        "limits": {
          "$ref": "#/definitions/ActionLimits"
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings included in the context passed to the action",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Activation": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish",
        "subject",
        "activationId",
        "start",
        "response",
        "logs"
      ],
      "properties": {
        "activationId": {
          "description": "Id of the activation",
          "type": "string"
        },
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "cause": {
          "description": "the activation id that caused this activation",
          "type": "string"
        },
        "duration": {
          "description": "How long the invocation took, in millisecnods",
          "type": "integer"
        },
        "end": {
          "description": "Time when the activation completed",
          "type": "integer"
        },
        "logs": {
          "description": "Logs generated by the activation",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of the item",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the associated item",
          "type": "string"
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "response": {
          "$ref": "#/definitions/ActivationResult"
        },
        "start": {
          "description": "Time when the activation began",
          "type": "integer"
        },
        "statusCode": {
          "description": "The status code",
          "type": "integer",
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ]
        },
        "subject": {
          "description": "The subject that activated the item",
          "type": "string"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string"
        }
      }
    },
    "ActivationBrief": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish",
        "activationId",
        "start"
      ],
      "properties": {
        "activationId": {
          "description": "Id of the activation",
          "type": "string"
        },
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "cause": {
          "description": "the activation id that caused this activation",
          "type": "string"
        },
        "duration": {
          "description": "How long the invocation took, in millisecnods",
          "type": "integer"
        },
        "end": {
          "description": "Time when the activation completed",
          "type": "integer"
        },
        "name": {
          "description": "Name of the item",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the associated item",
          "type": "string"
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "start": {
          "description": "Time when the activation began",
          "type": "integer"
        },
        "statusCode": {
          "description": "The status code",
          "type": "integer",
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ]
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string"
        }
      }
    },
    "ActivationId": {
      "required": [
        "activationId"
      ],
      "properties": {
        "activationId": {
          "type": "string"
        }
      }
    },
    "ActivationIds": {
      "properties": {
        "ids": {
          "description": "Array of activation ids",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivationId"
          }
        }
      }
    },
    "ActivationInfo": {
      "properties": {
        "id": {
          "description": "Activation id",
          "type": "string",
          "minLength": 1
        },
        "result": {
          "description": "Activation result",
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "type": "string"
            }
          }
        },
        "stderr": {
          "description": "Standard error from activation",
          "type": "string"
        },
        "stdout": {
          "description": "Standard output from activation",
          "type": "string"
        }
      }
    },
    "ActivationLogs": {
      "properties": {
        "logs": {
          "description": "Interleaved standard output and error of an activation",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ActivationResult": {
      "properties": {
        "result": {
          "description": "The return value from the activation"
        },
        "status": {
          "description": "Exit status of the activation",
          "type": "string"
        },
        "success": {
          "description": "Whether the activation was successful or not",
          "type": "boolean"
        }
      }
    },
    "ActivationStderr": {
      "properties": {
        "stderr": {
          "description": "Standard error of an activation",
          "type": "string"
        }
      }
    },
    "EntityBrief": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish"
      ],
      "properties": {
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ErrorMessage": {
      "required": [
        "error"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "ItemId": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "KeyValue": {
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "description": "Any JSON value"
        }
      }
    },
    "Package": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish"
      ],
      "properties": {
        "actions": {
          "description": "Actions contained in this package",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageAction"
          }
        },
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "binding": {
          "$ref": "#/definitions/PackageBinding"
        },
        "feeds": {
          "description": "Feeds contained in this package",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter for the package",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "updated": {
          "description": "Time when the package was updated",
          "type": "integer"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "PackageAction": {
      "description": "A restricted Action view used when listing actions in a package",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings included in the context passed to the action",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "PackageBinding": {
      "properties": {
        "name": {
          "description": "Name of the item",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string"
        }
      }
    },
    "PackagePut": {
      "description": "A restricted Package view used when updating a Package",
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "binding": {
          "$ref": "#/definitions/PackageBinding"
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter for the package",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "PathName": {
      "required": [
        "path",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "Provider": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the provider",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings included in the context passed to the provider",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the provider or not",
          "type": "boolean"
        }
      }
    },
    "ProviderAction": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the action",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ProviderBinding": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the binding",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ProviderTrigger": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the trigger",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Rule": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish",
        "trigger",
        "action"
      ],
      "properties": {
        "action": {
          "$ref": "#/definitions/PathName"
        },
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "status": {
          "description": "Status of a rule",
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "activating",
            "deactivating"
          ]
        },
        "trigger": {
          "$ref": "#/definitions/PathName"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "RulePut": {
      "description": "A restricted Rule view used when updating a Rule",
      "properties": {
        "action": {
          "description": "Name of the action",
          "type": "string",
          "minLength": 1
        },
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "status": {
          "description": "Status of a rule",
          "type": "string",
          "enum": [
            "active",
            "inactive",
            ""
          ]
        },
        "trigger": {
          "description": "Name of the trigger",
          "type": "string",
          "minLength": 1
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Trigger": {
      "required": [
        "namespace",
        "name",
        "version",
        "publish"
      ],
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "limits": {
          "$ref": "#/definitions/TriggerLimits"
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings for the trigger",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "rules": {
          "description": "rules associated with the trigger",
          "type": "object"
        },
        "updated": {
          "description": "Time when the trigger was updated",
          "type": "integer"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "TriggerLimits": {
      "description": "Limits on a specific trigger",
      "type": "object"
    },
    "TriggerPayload": {
      "required": [
        "payload"
      ],
      "properties": {
        "payload": {
          "description": "The payload of the trigger event.",
          "type": "string"
        }
      }
    },
    "TriggerPut": {
      "description": "A restricted Trigger view used when updating the Trigger",
      "properties": {
        "annotations": {
          "description": "annotations on the item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "limits": {
          "$ref": "#/definitions/TriggerLimits"
        },
        "name": {
          "description": "Name of the item",
          "type": "string",
          "minLength": 1
        },
        "namespace": {
          "description": "Namespace of the item",
          "type": "string",
          "minLength": 1
        },
        "parameters": {
          "description": "parameter bindings included in the context passed to the trigger",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        },
        "publish": {
          "description": "Whether to publish the item or not",
          "type": "boolean"
        },
        "version": {
          "description": "Semantic version of the item",
          "type": "string",
          "minLength": 1
        }
      }
    }
  },
  "responses": {
    "AcceptedActivation": {
      "description": "Accepted activation request",
      "schema": {
        "$ref": "#/definitions/ActivationId"
      }
    },
    "AcceptedRuleStateChange": {
      "description": "Rule has been enabled or disabled"
    },
    "AddedItem": {
      "description": "Added Item",
      "schema": {
        "$ref": "#/definitions/ItemId"
      }
    },
    "BadRequest": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "Conflict": {
      "description": "Conflicting item already exists",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "DeletedItem": {
      "description": "Deleted Item"
    },
    "ItemNotFound": {
      "description": "Item not found",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "NoActiveRules": {
      "description": "Trigger has no active rules"
    },
    "RequestEntityTooLarge": {
      "description": "Request entity too large",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "ServerError": {
      "description": "Server error",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "Timeout": {
      "description": "Request timed out"
    },
    "TooManyRequests": {
      "description": "Too many requests in a given time period"
    },
    "UnauthorizedRequest": {
      "description": "Unauthorized request",
      "schema": {
        "$ref": "#/definitions/ErrorMessage"
      }
    },
    "UpdatedItem": {
      "description": "Updated Item",
      "schema": {
        "$ref": "#/definitions/ItemId"
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "Actions"
    },
    {
      "name": "Rules"
    },
    {
      "name": "Triggers"
    },
    {
      "name": "Activations"
    },
    {
      "name": "Packages"
    },
    {
      "name": "Namespaces"
    }
  ]
}`))
}
