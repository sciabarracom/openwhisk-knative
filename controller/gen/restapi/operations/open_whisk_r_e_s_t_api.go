// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sciabarracom/openwhisk-knative/controller/gen/restapi/operations/actions"
	"github.com/sciabarracom/openwhisk-knative/controller/gen/restapi/operations/activations"
	"github.com/sciabarracom/openwhisk-knative/controller/gen/restapi/operations/namespaces"
	"github.com/sciabarracom/openwhisk-knative/controller/gen/restapi/operations/packages"
	"github.com/sciabarracom/openwhisk-knative/controller/gen/restapi/operations/rules"
	"github.com/sciabarracom/openwhisk-knative/controller/gen/restapi/operations/triggers"

	models "github.com/sciabarracom/openwhisk-knative/controller/gen/models"
)

// NewOpenWhiskRESTAPI creates a new OpenWhiskREST instance
func NewOpenWhiskRESTAPI(spec *loads.Document) *OpenWhiskRESTAPI {
	return &OpenWhiskRESTAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		TxtProducer:         runtime.TextProducer(),
		ActionsDeleteWebNamespacePackageNameActionNameExtensionHandler: actions.DeleteWebNamespacePackageNameActionNameExtensionHandlerFunc(func(params actions.DeleteWebNamespacePackageNameActionNameExtensionParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsDeleteWebNamespacePackageNameActionNameExtension has not yet been implemented")
		}),
		ActionsGetWebNamespacePackageNameActionNameExtensionHandler: actions.GetWebNamespacePackageNameActionNameExtensionHandlerFunc(func(params actions.GetWebNamespacePackageNameActionNameExtensionParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsGetWebNamespacePackageNameActionNameExtension has not yet been implemented")
		}),
		ActionsPostWebNamespacePackageNameActionNameExtensionHandler: actions.PostWebNamespacePackageNameActionNameExtensionHandlerFunc(func(params actions.PostWebNamespacePackageNameActionNameExtensionParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsPostWebNamespacePackageNameActionNameExtension has not yet been implemented")
		}),
		ActionsPutWebNamespacePackageNameActionNameExtensionHandler: actions.PutWebNamespacePackageNameActionNameExtensionHandlerFunc(func(params actions.PutWebNamespacePackageNameActionNameExtensionParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsPutWebNamespacePackageNameActionNameExtension has not yet been implemented")
		}),
		ActionsDeleteActionHandler: actions.DeleteActionHandlerFunc(func(params actions.DeleteActionParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsDeleteAction has not yet been implemented")
		}),
		ActionsDeleteActionInPackageHandler: actions.DeleteActionInPackageHandlerFunc(func(params actions.DeleteActionInPackageParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsDeleteActionInPackage has not yet been implemented")
		}),
		PackagesDeletePackageHandler: packages.DeletePackageHandlerFunc(func(params packages.DeletePackageParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation PackagesDeletePackage has not yet been implemented")
		}),
		RulesDeleteRuleHandler: rules.DeleteRuleHandlerFunc(func(params rules.DeleteRuleParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation RulesDeleteRule has not yet been implemented")
		}),
		TriggersDeleteTriggerHandler: triggers.DeleteTriggerHandlerFunc(func(params triggers.DeleteTriggerParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation TriggersDeleteTrigger has not yet been implemented")
		}),
		TriggersFireTriggerHandler: triggers.FireTriggerHandlerFunc(func(params triggers.FireTriggerParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation TriggersFireTrigger has not yet been implemented")
		}),
		ActionsGetActionByNameHandler: actions.GetActionByNameHandlerFunc(func(params actions.GetActionByNameParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsGetActionByName has not yet been implemented")
		}),
		ActionsGetActionInPackageByNameHandler: actions.GetActionInPackageByNameHandlerFunc(func(params actions.GetActionInPackageByNameParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsGetActionInPackageByName has not yet been implemented")
		}),
		ActivationsGetActivationByIDHandler: activations.GetActivationByIDHandlerFunc(func(params activations.GetActivationByIDParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActivationsGetActivationByID has not yet been implemented")
		}),
		ActivationsGetActivationLogsHandler: activations.GetActivationLogsHandlerFunc(func(params activations.GetActivationLogsParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActivationsGetActivationLogs has not yet been implemented")
		}),
		ActivationsGetActivationResultHandler: activations.GetActivationResultHandlerFunc(func(params activations.GetActivationResultParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActivationsGetActivationResult has not yet been implemented")
		}),
		ActivationsGetActivationsHandler: activations.GetActivationsHandlerFunc(func(params activations.GetActivationsParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActivationsGetActivations has not yet been implemented")
		}),
		ActionsGetAllActionsHandler: actions.GetAllActionsHandlerFunc(func(params actions.GetAllActionsParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsGetAllActions has not yet been implemented")
		}),
		NamespacesGetAllNamespacesHandler: namespaces.GetAllNamespacesHandlerFunc(func(params namespaces.GetAllNamespacesParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation NamespacesGetAllNamespaces has not yet been implemented")
		}),
		PackagesGetAllPackagesHandler: packages.GetAllPackagesHandlerFunc(func(params packages.GetAllPackagesParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation PackagesGetAllPackages has not yet been implemented")
		}),
		RulesGetAllRulesHandler: rules.GetAllRulesHandlerFunc(func(params rules.GetAllRulesParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation RulesGetAllRules has not yet been implemented")
		}),
		TriggersGetAllTriggersHandler: triggers.GetAllTriggersHandlerFunc(func(params triggers.GetAllTriggersParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation TriggersGetAllTriggers has not yet been implemented")
		}),
		PackagesGetPackageByNameHandler: packages.GetPackageByNameHandlerFunc(func(params packages.GetPackageByNameParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation PackagesGetPackageByName has not yet been implemented")
		}),
		RulesGetRuleByNameHandler: rules.GetRuleByNameHandlerFunc(func(params rules.GetRuleByNameParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation RulesGetRuleByName has not yet been implemented")
		}),
		TriggersGetTriggerByNameHandler: triggers.GetTriggerByNameHandlerFunc(func(params triggers.GetTriggerByNameParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation TriggersGetTriggerByName has not yet been implemented")
		}),
		ActionsInvokeActionHandler: actions.InvokeActionHandlerFunc(func(params actions.InvokeActionParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsInvokeAction has not yet been implemented")
		}),
		ActionsInvokeActionInPackageHandler: actions.InvokeActionInPackageHandlerFunc(func(params actions.InvokeActionInPackageParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsInvokeActionInPackage has not yet been implemented")
		}),
		RulesSetStateHandler: rules.SetStateHandlerFunc(func(params rules.SetStateParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation RulesSetState has not yet been implemented")
		}),
		ActionsUpdateActionHandler: actions.UpdateActionHandlerFunc(func(params actions.UpdateActionParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsUpdateAction has not yet been implemented")
		}),
		ActionsUpdateActionInPackageHandler: actions.UpdateActionInPackageHandlerFunc(func(params actions.UpdateActionInPackageParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation ActionsUpdateActionInPackage has not yet been implemented")
		}),
		PackagesUpdatePackageHandler: packages.UpdatePackageHandlerFunc(func(params packages.UpdatePackageParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation PackagesUpdatePackage has not yet been implemented")
		}),
		RulesUpdateRuleHandler: rules.UpdateRuleHandlerFunc(func(params rules.UpdateRuleParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation RulesUpdateRule has not yet been implemented")
		}),
		TriggersUpdateTriggerHandler: triggers.UpdateTriggerHandlerFunc(func(params triggers.UpdateTriggerParams, principal *models.Auth) middleware.Responder {
			return middleware.NotImplemented("operation TriggersUpdateTrigger has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		BasicAuthAuth: func(user string, pass string) (*models.Auth, error) {
			return nil, errors.NotImplemented("basic auth  (basicAuth) has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*OpenWhiskRESTAPI API for OpenWhisk */
type OpenWhiskRESTAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for a "text/plain" mime type
	TxtProducer runtime.Producer

	// BasicAuthAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	BasicAuthAuth func(string, string) (*models.Auth, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// ActionsDeleteWebNamespacePackageNameActionNameExtensionHandler sets the operation handler for the delete web namespace package name action name extension operation
	ActionsDeleteWebNamespacePackageNameActionNameExtensionHandler actions.DeleteWebNamespacePackageNameActionNameExtensionHandler
	// ActionsGetWebNamespacePackageNameActionNameExtensionHandler sets the operation handler for the get web namespace package name action name extension operation
	ActionsGetWebNamespacePackageNameActionNameExtensionHandler actions.GetWebNamespacePackageNameActionNameExtensionHandler
	// ActionsPostWebNamespacePackageNameActionNameExtensionHandler sets the operation handler for the post web namespace package name action name extension operation
	ActionsPostWebNamespacePackageNameActionNameExtensionHandler actions.PostWebNamespacePackageNameActionNameExtensionHandler
	// ActionsPutWebNamespacePackageNameActionNameExtensionHandler sets the operation handler for the put web namespace package name action name extension operation
	ActionsPutWebNamespacePackageNameActionNameExtensionHandler actions.PutWebNamespacePackageNameActionNameExtensionHandler
	// ActionsDeleteActionHandler sets the operation handler for the delete action operation
	ActionsDeleteActionHandler actions.DeleteActionHandler
	// ActionsDeleteActionInPackageHandler sets the operation handler for the delete action in package operation
	ActionsDeleteActionInPackageHandler actions.DeleteActionInPackageHandler
	// PackagesDeletePackageHandler sets the operation handler for the delete package operation
	PackagesDeletePackageHandler packages.DeletePackageHandler
	// RulesDeleteRuleHandler sets the operation handler for the delete rule operation
	RulesDeleteRuleHandler rules.DeleteRuleHandler
	// TriggersDeleteTriggerHandler sets the operation handler for the delete trigger operation
	TriggersDeleteTriggerHandler triggers.DeleteTriggerHandler
	// TriggersFireTriggerHandler sets the operation handler for the fire trigger operation
	TriggersFireTriggerHandler triggers.FireTriggerHandler
	// ActionsGetActionByNameHandler sets the operation handler for the get action by name operation
	ActionsGetActionByNameHandler actions.GetActionByNameHandler
	// ActionsGetActionInPackageByNameHandler sets the operation handler for the get action in package by name operation
	ActionsGetActionInPackageByNameHandler actions.GetActionInPackageByNameHandler
	// ActivationsGetActivationByIDHandler sets the operation handler for the get activation by Id operation
	ActivationsGetActivationByIDHandler activations.GetActivationByIDHandler
	// ActivationsGetActivationLogsHandler sets the operation handler for the get activation logs operation
	ActivationsGetActivationLogsHandler activations.GetActivationLogsHandler
	// ActivationsGetActivationResultHandler sets the operation handler for the get activation result operation
	ActivationsGetActivationResultHandler activations.GetActivationResultHandler
	// ActivationsGetActivationsHandler sets the operation handler for the get activations operation
	ActivationsGetActivationsHandler activations.GetActivationsHandler
	// ActionsGetAllActionsHandler sets the operation handler for the get all actions operation
	ActionsGetAllActionsHandler actions.GetAllActionsHandler
	// NamespacesGetAllNamespacesHandler sets the operation handler for the get all namespaces operation
	NamespacesGetAllNamespacesHandler namespaces.GetAllNamespacesHandler
	// PackagesGetAllPackagesHandler sets the operation handler for the get all packages operation
	PackagesGetAllPackagesHandler packages.GetAllPackagesHandler
	// RulesGetAllRulesHandler sets the operation handler for the get all rules operation
	RulesGetAllRulesHandler rules.GetAllRulesHandler
	// TriggersGetAllTriggersHandler sets the operation handler for the get all triggers operation
	TriggersGetAllTriggersHandler triggers.GetAllTriggersHandler
	// PackagesGetPackageByNameHandler sets the operation handler for the get package by name operation
	PackagesGetPackageByNameHandler packages.GetPackageByNameHandler
	// RulesGetRuleByNameHandler sets the operation handler for the get rule by name operation
	RulesGetRuleByNameHandler rules.GetRuleByNameHandler
	// TriggersGetTriggerByNameHandler sets the operation handler for the get trigger by name operation
	TriggersGetTriggerByNameHandler triggers.GetTriggerByNameHandler
	// ActionsInvokeActionHandler sets the operation handler for the invoke action operation
	ActionsInvokeActionHandler actions.InvokeActionHandler
	// ActionsInvokeActionInPackageHandler sets the operation handler for the invoke action in package operation
	ActionsInvokeActionInPackageHandler actions.InvokeActionInPackageHandler
	// RulesSetStateHandler sets the operation handler for the set state operation
	RulesSetStateHandler rules.SetStateHandler
	// ActionsUpdateActionHandler sets the operation handler for the update action operation
	ActionsUpdateActionHandler actions.UpdateActionHandler
	// ActionsUpdateActionInPackageHandler sets the operation handler for the update action in package operation
	ActionsUpdateActionInPackageHandler actions.UpdateActionInPackageHandler
	// PackagesUpdatePackageHandler sets the operation handler for the update package operation
	PackagesUpdatePackageHandler packages.UpdatePackageHandler
	// RulesUpdateRuleHandler sets the operation handler for the update rule operation
	RulesUpdateRuleHandler rules.UpdateRuleHandler
	// TriggersUpdateTriggerHandler sets the operation handler for the update trigger operation
	TriggersUpdateTriggerHandler triggers.UpdateTriggerHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *OpenWhiskRESTAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *OpenWhiskRESTAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *OpenWhiskRESTAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *OpenWhiskRESTAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *OpenWhiskRESTAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *OpenWhiskRESTAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *OpenWhiskRESTAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the OpenWhiskRESTAPI
func (o *OpenWhiskRESTAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.BasicAuthAuth == nil {
		unregistered = append(unregistered, "BasicAuthAuth")
	}

	if o.ActionsDeleteWebNamespacePackageNameActionNameExtensionHandler == nil {
		unregistered = append(unregistered, "actions.DeleteWebNamespacePackageNameActionNameExtensionHandler")
	}

	if o.ActionsGetWebNamespacePackageNameActionNameExtensionHandler == nil {
		unregistered = append(unregistered, "actions.GetWebNamespacePackageNameActionNameExtensionHandler")
	}

	if o.ActionsPostWebNamespacePackageNameActionNameExtensionHandler == nil {
		unregistered = append(unregistered, "actions.PostWebNamespacePackageNameActionNameExtensionHandler")
	}

	if o.ActionsPutWebNamespacePackageNameActionNameExtensionHandler == nil {
		unregistered = append(unregistered, "actions.PutWebNamespacePackageNameActionNameExtensionHandler")
	}

	if o.ActionsDeleteActionHandler == nil {
		unregistered = append(unregistered, "actions.DeleteActionHandler")
	}

	if o.ActionsDeleteActionInPackageHandler == nil {
		unregistered = append(unregistered, "actions.DeleteActionInPackageHandler")
	}

	if o.PackagesDeletePackageHandler == nil {
		unregistered = append(unregistered, "packages.DeletePackageHandler")
	}

	if o.RulesDeleteRuleHandler == nil {
		unregistered = append(unregistered, "rules.DeleteRuleHandler")
	}

	if o.TriggersDeleteTriggerHandler == nil {
		unregistered = append(unregistered, "triggers.DeleteTriggerHandler")
	}

	if o.TriggersFireTriggerHandler == nil {
		unregistered = append(unregistered, "triggers.FireTriggerHandler")
	}

	if o.ActionsGetActionByNameHandler == nil {
		unregistered = append(unregistered, "actions.GetActionByNameHandler")
	}

	if o.ActionsGetActionInPackageByNameHandler == nil {
		unregistered = append(unregistered, "actions.GetActionInPackageByNameHandler")
	}

	if o.ActivationsGetActivationByIDHandler == nil {
		unregistered = append(unregistered, "activations.GetActivationByIDHandler")
	}

	if o.ActivationsGetActivationLogsHandler == nil {
		unregistered = append(unregistered, "activations.GetActivationLogsHandler")
	}

	if o.ActivationsGetActivationResultHandler == nil {
		unregistered = append(unregistered, "activations.GetActivationResultHandler")
	}

	if o.ActivationsGetActivationsHandler == nil {
		unregistered = append(unregistered, "activations.GetActivationsHandler")
	}

	if o.ActionsGetAllActionsHandler == nil {
		unregistered = append(unregistered, "actions.GetAllActionsHandler")
	}

	if o.NamespacesGetAllNamespacesHandler == nil {
		unregistered = append(unregistered, "namespaces.GetAllNamespacesHandler")
	}

	if o.PackagesGetAllPackagesHandler == nil {
		unregistered = append(unregistered, "packages.GetAllPackagesHandler")
	}

	if o.RulesGetAllRulesHandler == nil {
		unregistered = append(unregistered, "rules.GetAllRulesHandler")
	}

	if o.TriggersGetAllTriggersHandler == nil {
		unregistered = append(unregistered, "triggers.GetAllTriggersHandler")
	}

	if o.PackagesGetPackageByNameHandler == nil {
		unregistered = append(unregistered, "packages.GetPackageByNameHandler")
	}

	if o.RulesGetRuleByNameHandler == nil {
		unregistered = append(unregistered, "rules.GetRuleByNameHandler")
	}

	if o.TriggersGetTriggerByNameHandler == nil {
		unregistered = append(unregistered, "triggers.GetTriggerByNameHandler")
	}

	if o.ActionsInvokeActionHandler == nil {
		unregistered = append(unregistered, "actions.InvokeActionHandler")
	}

	if o.ActionsInvokeActionInPackageHandler == nil {
		unregistered = append(unregistered, "actions.InvokeActionInPackageHandler")
	}

	if o.RulesSetStateHandler == nil {
		unregistered = append(unregistered, "rules.SetStateHandler")
	}

	if o.ActionsUpdateActionHandler == nil {
		unregistered = append(unregistered, "actions.UpdateActionHandler")
	}

	if o.ActionsUpdateActionInPackageHandler == nil {
		unregistered = append(unregistered, "actions.UpdateActionInPackageHandler")
	}

	if o.PackagesUpdatePackageHandler == nil {
		unregistered = append(unregistered, "packages.UpdatePackageHandler")
	}

	if o.RulesUpdateRuleHandler == nil {
		unregistered = append(unregistered, "rules.UpdateRuleHandler")
	}

	if o.TriggersUpdateTriggerHandler == nil {
		unregistered = append(unregistered, "triggers.UpdateTriggerHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *OpenWhiskRESTAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *OpenWhiskRESTAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "basicAuth":
			_ = scheme
			result[name] = o.BasicAuthenticator(func(username, password string) (interface{}, error) {
				return o.BasicAuthAuth(username, password)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *OpenWhiskRESTAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *OpenWhiskRESTAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *OpenWhiskRESTAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "text/plain":
			result["text/plain"] = o.TxtProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *OpenWhiskRESTAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the open whisk r e s t API
func (o *OpenWhiskRESTAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *OpenWhiskRESTAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/web/{namespace}/{packageName}/{actionName}.{extension}"] = actions.NewDeleteWebNamespacePackageNameActionNameExtension(o.context, o.ActionsDeleteWebNamespacePackageNameActionNameExtensionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/web/{namespace}/{packageName}/{actionName}.{extension}"] = actions.NewGetWebNamespacePackageNameActionNameExtension(o.context, o.ActionsGetWebNamespacePackageNameActionNameExtensionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/web/{namespace}/{packageName}/{actionName}.{extension}"] = actions.NewPostWebNamespacePackageNameActionNameExtension(o.context, o.ActionsPostWebNamespacePackageNameActionNameExtensionHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/web/{namespace}/{packageName}/{actionName}.{extension}"] = actions.NewPutWebNamespacePackageNameActionNameExtension(o.context, o.ActionsPutWebNamespacePackageNameActionNameExtensionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/namespaces/{namespace}/actions/{actionName}"] = actions.NewDeleteAction(o.context, o.ActionsDeleteActionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/namespaces/{namespace}/actions/{packageName}/{actionName}"] = actions.NewDeleteActionInPackage(o.context, o.ActionsDeleteActionInPackageHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/namespaces/{namespace}/packages/{packageName}"] = packages.NewDeletePackage(o.context, o.PackagesDeletePackageHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/namespaces/{namespace}/rules/{ruleName}"] = rules.NewDeleteRule(o.context, o.RulesDeleteRuleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/namespaces/{namespace}/triggers/{triggerName}"] = triggers.NewDeleteTrigger(o.context, o.TriggersDeleteTriggerHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/namespaces/{namespace}/triggers/{triggerName}"] = triggers.NewFireTrigger(o.context, o.TriggersFireTriggerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/actions/{actionName}"] = actions.NewGetActionByName(o.context, o.ActionsGetActionByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/actions/{packageName}/{actionName}"] = actions.NewGetActionInPackageByName(o.context, o.ActionsGetActionInPackageByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/activations/{activationid}"] = activations.NewGetActivationByID(o.context, o.ActivationsGetActivationByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/activations/{activationid}/logs"] = activations.NewGetActivationLogs(o.context, o.ActivationsGetActivationLogsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/activations/{activationid}/result"] = activations.NewGetActivationResult(o.context, o.ActivationsGetActivationResultHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/activations"] = activations.NewGetActivations(o.context, o.ActivationsGetActivationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/actions"] = actions.NewGetAllActions(o.context, o.ActionsGetAllActionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces"] = namespaces.NewGetAllNamespaces(o.context, o.NamespacesGetAllNamespacesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/packages"] = packages.NewGetAllPackages(o.context, o.PackagesGetAllPackagesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/rules"] = rules.NewGetAllRules(o.context, o.RulesGetAllRulesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/triggers"] = triggers.NewGetAllTriggers(o.context, o.TriggersGetAllTriggersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/packages/{packageName}"] = packages.NewGetPackageByName(o.context, o.PackagesGetPackageByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/rules/{ruleName}"] = rules.NewGetRuleByName(o.context, o.RulesGetRuleByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/namespaces/{namespace}/triggers/{triggerName}"] = triggers.NewGetTriggerByName(o.context, o.TriggersGetTriggerByNameHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/namespaces/{namespace}/actions/{actionName}"] = actions.NewInvokeAction(o.context, o.ActionsInvokeActionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/namespaces/{namespace}/actions/{packageName}/{actionName}"] = actions.NewInvokeActionInPackage(o.context, o.ActionsInvokeActionInPackageHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/namespaces/{namespace}/rules/{ruleName}"] = rules.NewSetState(o.context, o.RulesSetStateHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/namespaces/{namespace}/actions/{actionName}"] = actions.NewUpdateAction(o.context, o.ActionsUpdateActionHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/namespaces/{namespace}/actions/{packageName}/{actionName}"] = actions.NewUpdateActionInPackage(o.context, o.ActionsUpdateActionInPackageHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/namespaces/{namespace}/packages/{packageName}"] = packages.NewUpdatePackage(o.context, o.PackagesUpdatePackageHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/namespaces/{namespace}/rules/{ruleName}"] = rules.NewUpdateRule(o.context, o.RulesUpdateRuleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/namespaces/{namespace}/triggers/{triggerName}"] = triggers.NewUpdateTrigger(o.context, o.TriggersUpdateTriggerHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *OpenWhiskRESTAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *OpenWhiskRESTAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *OpenWhiskRESTAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *OpenWhiskRESTAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
