// Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sciabarracom/openwhisk-knative/controller/gen/models"
)

// UpdateActionOKCode is the HTTP code returned for type UpdateActionOK
const UpdateActionOKCode int = 200

/*UpdateActionOK Updated Action

swagger:response updateActionOK
*/
type UpdateActionOK struct {

	/*
	  In: Body
	*/
	Payload *models.Action `json:"body,omitempty"`
}

// NewUpdateActionOK creates UpdateActionOK with default headers values
func NewUpdateActionOK() *UpdateActionOK {

	return &UpdateActionOK{}
}

// WithPayload adds the payload to the update action o k response
func (o *UpdateActionOK) WithPayload(payload *models.Action) *UpdateActionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action o k response
func (o *UpdateActionOK) SetPayload(payload *models.Action) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionBadRequestCode is the HTTP code returned for type UpdateActionBadRequest
const UpdateActionBadRequestCode int = 400

/*UpdateActionBadRequest Bad request

swagger:response updateActionBadRequest
*/
type UpdateActionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionBadRequest creates UpdateActionBadRequest with default headers values
func NewUpdateActionBadRequest() *UpdateActionBadRequest {

	return &UpdateActionBadRequest{}
}

// WithPayload adds the payload to the update action bad request response
func (o *UpdateActionBadRequest) WithPayload(payload *models.ErrorMessage) *UpdateActionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action bad request response
func (o *UpdateActionBadRequest) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionUnauthorizedCode is the HTTP code returned for type UpdateActionUnauthorized
const UpdateActionUnauthorizedCode int = 401

/*UpdateActionUnauthorized Unauthorized request

swagger:response updateActionUnauthorized
*/
type UpdateActionUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionUnauthorized creates UpdateActionUnauthorized with default headers values
func NewUpdateActionUnauthorized() *UpdateActionUnauthorized {

	return &UpdateActionUnauthorized{}
}

// WithPayload adds the payload to the update action unauthorized response
func (o *UpdateActionUnauthorized) WithPayload(payload *models.ErrorMessage) *UpdateActionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action unauthorized response
func (o *UpdateActionUnauthorized) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionForbiddenCode is the HTTP code returned for type UpdateActionForbidden
const UpdateActionForbiddenCode int = 403

/*UpdateActionForbidden Unauthorized request

swagger:response updateActionForbidden
*/
type UpdateActionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionForbidden creates UpdateActionForbidden with default headers values
func NewUpdateActionForbidden() *UpdateActionForbidden {

	return &UpdateActionForbidden{}
}

// WithPayload adds the payload to the update action forbidden response
func (o *UpdateActionForbidden) WithPayload(payload *models.ErrorMessage) *UpdateActionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action forbidden response
func (o *UpdateActionForbidden) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionConflictCode is the HTTP code returned for type UpdateActionConflict
const UpdateActionConflictCode int = 409

/*UpdateActionConflict Conflicting item already exists

swagger:response updateActionConflict
*/
type UpdateActionConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionConflict creates UpdateActionConflict with default headers values
func NewUpdateActionConflict() *UpdateActionConflict {

	return &UpdateActionConflict{}
}

// WithPayload adds the payload to the update action conflict response
func (o *UpdateActionConflict) WithPayload(payload *models.ErrorMessage) *UpdateActionConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action conflict response
func (o *UpdateActionConflict) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionRequestEntityTooLargeCode is the HTTP code returned for type UpdateActionRequestEntityTooLarge
const UpdateActionRequestEntityTooLargeCode int = 413

/*UpdateActionRequestEntityTooLarge Request entity too large

swagger:response updateActionRequestEntityTooLarge
*/
type UpdateActionRequestEntityTooLarge struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionRequestEntityTooLarge creates UpdateActionRequestEntityTooLarge with default headers values
func NewUpdateActionRequestEntityTooLarge() *UpdateActionRequestEntityTooLarge {

	return &UpdateActionRequestEntityTooLarge{}
}

// WithPayload adds the payload to the update action request entity too large response
func (o *UpdateActionRequestEntityTooLarge) WithPayload(payload *models.ErrorMessage) *UpdateActionRequestEntityTooLarge {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action request entity too large response
func (o *UpdateActionRequestEntityTooLarge) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionRequestEntityTooLarge) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(413)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionInternalServerErrorCode is the HTTP code returned for type UpdateActionInternalServerError
const UpdateActionInternalServerErrorCode int = 500

/*UpdateActionInternalServerError Server error

swagger:response updateActionInternalServerError
*/
type UpdateActionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionInternalServerError creates UpdateActionInternalServerError with default headers values
func NewUpdateActionInternalServerError() *UpdateActionInternalServerError {

	return &UpdateActionInternalServerError{}
}

// WithPayload adds the payload to the update action internal server error response
func (o *UpdateActionInternalServerError) WithPayload(payload *models.ErrorMessage) *UpdateActionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action internal server error response
func (o *UpdateActionInternalServerError) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
