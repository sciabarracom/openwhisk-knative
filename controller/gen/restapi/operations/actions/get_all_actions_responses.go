// Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sciabarracom/openwhisk-knative/controller/gen/models"
)

// GetAllActionsOKCode is the HTTP code returned for type GetAllActionsOK
const GetAllActionsOKCode int = 200

/*GetAllActionsOK Actions response

swagger:response getAllActionsOK
*/
type GetAllActionsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Action `json:"body,omitempty"`
}

// NewGetAllActionsOK creates GetAllActionsOK with default headers values
func NewGetAllActionsOK() *GetAllActionsOK {

	return &GetAllActionsOK{}
}

// WithPayload adds the payload to the get all actions o k response
func (o *GetAllActionsOK) WithPayload(payload []*models.Action) *GetAllActionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all actions o k response
func (o *GetAllActionsOK) SetPayload(payload []*models.Action) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllActionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Action, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAllActionsUnauthorizedCode is the HTTP code returned for type GetAllActionsUnauthorized
const GetAllActionsUnauthorizedCode int = 401

/*GetAllActionsUnauthorized Unauthorized request

swagger:response getAllActionsUnauthorized
*/
type GetAllActionsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetAllActionsUnauthorized creates GetAllActionsUnauthorized with default headers values
func NewGetAllActionsUnauthorized() *GetAllActionsUnauthorized {

	return &GetAllActionsUnauthorized{}
}

// WithPayload adds the payload to the get all actions unauthorized response
func (o *GetAllActionsUnauthorized) WithPayload(payload *models.ErrorMessage) *GetAllActionsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all actions unauthorized response
func (o *GetAllActionsUnauthorized) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllActionsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllActionsInternalServerErrorCode is the HTTP code returned for type GetAllActionsInternalServerError
const GetAllActionsInternalServerErrorCode int = 500

/*GetAllActionsInternalServerError Server error

swagger:response getAllActionsInternalServerError
*/
type GetAllActionsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetAllActionsInternalServerError creates GetAllActionsInternalServerError with default headers values
func NewGetAllActionsInternalServerError() *GetAllActionsInternalServerError {

	return &GetAllActionsInternalServerError{}
}

// WithPayload adds the payload to the get all actions internal server error response
func (o *GetAllActionsInternalServerError) WithPayload(payload *models.ErrorMessage) *GetAllActionsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all actions internal server error response
func (o *GetAllActionsInternalServerError) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllActionsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
