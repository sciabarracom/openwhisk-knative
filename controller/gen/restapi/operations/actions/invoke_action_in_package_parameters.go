// Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewInvokeActionInPackageParams creates a new InvokeActionInPackageParams object
// no default values defined in spec.
func NewInvokeActionInPackageParams() InvokeActionInPackageParams {

	return InvokeActionInPackageParams{}
}

// InvokeActionInPackageParams contains all the bound params for the invoke action in package operation
// typically these are obtained from a http.Request
//
// swagger:parameters invokeActionInPackage
type InvokeActionInPackageParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Name of action to fetch
	  Required: true
	  In: path
	*/
	ActionName string
	/*Blocking or non-blocking invocation. Default is non-blocking.
	  In: query
	*/
	Blocking *string
	/*The entity namespace
	  Required: true
	  In: path
	*/
	Namespace string
	/*Name of package that contains action
	  Required: true
	  In: path
	*/
	PackageName string
	/*The parameters for the action being invoked
	  In: body
	*/
	Payload interface{}
	/*Return only the result of a blocking activation. Default is false.
	  In: query
	*/
	Result *string
	/*Wait no more than specified duration in milliseconds for a blocking response. Default value and max allowed timeout are 60000.
	  In: query
	*/
	Timeout *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewInvokeActionInPackageParams() beforehand.
func (o *InvokeActionInPackageParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rActionName, rhkActionName, _ := route.Params.GetOK("actionName")
	if err := o.bindActionName(rActionName, rhkActionName, route.Formats); err != nil {
		res = append(res, err)
	}

	qBlocking, qhkBlocking, _ := qs.GetOK("blocking")
	if err := o.bindBlocking(qBlocking, qhkBlocking, route.Formats); err != nil {
		res = append(res, err)
	}

	rNamespace, rhkNamespace, _ := route.Params.GetOK("namespace")
	if err := o.bindNamespace(rNamespace, rhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	rPackageName, rhkPackageName, _ := route.Params.GetOK("packageName")
	if err := o.bindPackageName(rPackageName, rhkPackageName, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body interface{}
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("payload", "body", "", err))
		} else {
			// no validation on generic interface
			o.Payload = body
		}
	}
	qResult, qhkResult, _ := qs.GetOK("result")
	if err := o.bindResult(qResult, qhkResult, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimeout, qhkTimeout, _ := qs.GetOK("timeout")
	if err := o.bindTimeout(qTimeout, qhkTimeout, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindActionName binds and validates parameter ActionName from path.
func (o *InvokeActionInPackageParams) bindActionName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ActionName = raw

	return nil
}

// bindBlocking binds and validates parameter Blocking from query.
func (o *InvokeActionInPackageParams) bindBlocking(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Blocking = &raw

	if err := o.validateBlocking(formats); err != nil {
		return err
	}

	return nil
}

// validateBlocking carries on validations for parameter Blocking
func (o *InvokeActionInPackageParams) validateBlocking(formats strfmt.Registry) error {

	if err := validate.Enum("blocking", "query", *o.Blocking, []interface{}{"true", "false"}); err != nil {
		return err
	}

	return nil
}

// bindNamespace binds and validates parameter Namespace from path.
func (o *InvokeActionInPackageParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Namespace = raw

	return nil
}

// bindPackageName binds and validates parameter PackageName from path.
func (o *InvokeActionInPackageParams) bindPackageName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.PackageName = raw

	return nil
}

// bindResult binds and validates parameter Result from query.
func (o *InvokeActionInPackageParams) bindResult(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Result = &raw

	if err := o.validateResult(formats); err != nil {
		return err
	}

	return nil
}

// validateResult carries on validations for parameter Result
func (o *InvokeActionInPackageParams) validateResult(formats strfmt.Registry) error {

	if err := validate.Enum("result", "query", *o.Result, []interface{}{"true", "false"}); err != nil {
		return err
	}

	return nil
}

// bindTimeout binds and validates parameter Timeout from query.
func (o *InvokeActionInPackageParams) bindTimeout(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("timeout", "query", "int64", raw)
	}
	o.Timeout = &value

	return nil
}
