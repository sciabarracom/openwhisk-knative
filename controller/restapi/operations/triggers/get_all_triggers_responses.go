// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sciabarracom/openwhisk-knative/controller/models"
)

// GetAllTriggersOKCode is the HTTP code returned for type GetAllTriggersOK
const GetAllTriggersOKCode int = 200

/*GetAllTriggersOK Triggers response

swagger:response getAllTriggersOK
*/
type GetAllTriggersOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Trigger `json:"body,omitempty"`
}

// NewGetAllTriggersOK creates GetAllTriggersOK with default headers values
func NewGetAllTriggersOK() *GetAllTriggersOK {

	return &GetAllTriggersOK{}
}

// WithPayload adds the payload to the get all triggers o k response
func (o *GetAllTriggersOK) WithPayload(payload []*models.Trigger) *GetAllTriggersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all triggers o k response
func (o *GetAllTriggersOK) SetPayload(payload []*models.Trigger) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllTriggersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Trigger, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAllTriggersUnauthorizedCode is the HTTP code returned for type GetAllTriggersUnauthorized
const GetAllTriggersUnauthorizedCode int = 401

/*GetAllTriggersUnauthorized Unauthorized request

swagger:response getAllTriggersUnauthorized
*/
type GetAllTriggersUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetAllTriggersUnauthorized creates GetAllTriggersUnauthorized with default headers values
func NewGetAllTriggersUnauthorized() *GetAllTriggersUnauthorized {

	return &GetAllTriggersUnauthorized{}
}

// WithPayload adds the payload to the get all triggers unauthorized response
func (o *GetAllTriggersUnauthorized) WithPayload(payload *models.ErrorMessage) *GetAllTriggersUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all triggers unauthorized response
func (o *GetAllTriggersUnauthorized) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllTriggersUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllTriggersInternalServerErrorCode is the HTTP code returned for type GetAllTriggersInternalServerError
const GetAllTriggersInternalServerErrorCode int = 500

/*GetAllTriggersInternalServerError Server error

swagger:response getAllTriggersInternalServerError
*/
type GetAllTriggersInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetAllTriggersInternalServerError creates GetAllTriggersInternalServerError with default headers values
func NewGetAllTriggersInternalServerError() *GetAllTriggersInternalServerError {

	return &GetAllTriggersInternalServerError{}
}

// WithPayload adds the payload to the get all triggers internal server error response
func (o *GetAllTriggersInternalServerError) WithPayload(payload *models.ErrorMessage) *GetAllTriggersInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all triggers internal server error response
func (o *GetAllTriggersInternalServerError) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllTriggersInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
