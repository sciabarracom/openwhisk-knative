// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sciabarracom/openwhisk-knative/controller/models"
)

// DeleteTriggerOKCode is the HTTP code returned for type DeleteTriggerOK
const DeleteTriggerOKCode int = 200

/*DeleteTriggerOK Deleted Item

swagger:response deleteTriggerOK
*/
type DeleteTriggerOK struct {
}

// NewDeleteTriggerOK creates DeleteTriggerOK with default headers values
func NewDeleteTriggerOK() *DeleteTriggerOK {

	return &DeleteTriggerOK{}
}

// WriteResponse to the client
func (o *DeleteTriggerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteTriggerUnauthorizedCode is the HTTP code returned for type DeleteTriggerUnauthorized
const DeleteTriggerUnauthorizedCode int = 401

/*DeleteTriggerUnauthorized Unauthorized request

swagger:response deleteTriggerUnauthorized
*/
type DeleteTriggerUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewDeleteTriggerUnauthorized creates DeleteTriggerUnauthorized with default headers values
func NewDeleteTriggerUnauthorized() *DeleteTriggerUnauthorized {

	return &DeleteTriggerUnauthorized{}
}

// WithPayload adds the payload to the delete trigger unauthorized response
func (o *DeleteTriggerUnauthorized) WithPayload(payload *models.ErrorMessage) *DeleteTriggerUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete trigger unauthorized response
func (o *DeleteTriggerUnauthorized) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTriggerUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTriggerNotFoundCode is the HTTP code returned for type DeleteTriggerNotFound
const DeleteTriggerNotFoundCode int = 404

/*DeleteTriggerNotFound Item not found

swagger:response deleteTriggerNotFound
*/
type DeleteTriggerNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewDeleteTriggerNotFound creates DeleteTriggerNotFound with default headers values
func NewDeleteTriggerNotFound() *DeleteTriggerNotFound {

	return &DeleteTriggerNotFound{}
}

// WithPayload adds the payload to the delete trigger not found response
func (o *DeleteTriggerNotFound) WithPayload(payload *models.ErrorMessage) *DeleteTriggerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete trigger not found response
func (o *DeleteTriggerNotFound) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTriggerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTriggerInternalServerErrorCode is the HTTP code returned for type DeleteTriggerInternalServerError
const DeleteTriggerInternalServerErrorCode int = 500

/*DeleteTriggerInternalServerError Server error

swagger:response deleteTriggerInternalServerError
*/
type DeleteTriggerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewDeleteTriggerInternalServerError creates DeleteTriggerInternalServerError with default headers values
func NewDeleteTriggerInternalServerError() *DeleteTriggerInternalServerError {

	return &DeleteTriggerInternalServerError{}
}

// WithPayload adds the payload to the delete trigger internal server error response
func (o *DeleteTriggerInternalServerError) WithPayload(payload *models.ErrorMessage) *DeleteTriggerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete trigger internal server error response
func (o *DeleteTriggerInternalServerError) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTriggerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
