// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// SetStateHandlerFunc turns a function with the right signature into a set state handler
type SetStateHandlerFunc func(SetStateParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn SetStateHandlerFunc) Handle(params SetStateParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// SetStateHandler interface for that can handle valid set state params
type SetStateHandler interface {
	Handle(SetStateParams, interface{}) middleware.Responder
}

// NewSetState creates a new http.Handler for the set state operation
func NewSetState(ctx *middleware.Context, handler SetStateHandler) *SetState {
	return &SetState{Context: ctx, Handler: handler}
}

/*SetState swagger:route POST /namespaces/{namespace}/rules/{ruleName} Rules setState

Enable or disable a rule

Enable or disable a rule

*/
type SetState struct {
	Context *middleware.Context
	Handler SetStateHandler
}

func (o *SetState) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetStateParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SetStateBody set state body
// swagger:model SetStateBody
type SetStateBody struct {

	// status
	// Required: true
	// Enum: [inactive active]
	Status *string `json:"status"`
}

// Validate validates this set state body
func (o *SetStateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var setStateBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["inactive","active"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		setStateBodyTypeStatusPropEnum = append(setStateBodyTypeStatusPropEnum, v)
	}
}

const (

	// SetStateBodyStatusInactive captures enum value "inactive"
	SetStateBodyStatusInactive string = "inactive"

	// SetStateBodyStatusActive captures enum value "active"
	SetStateBodyStatusActive string = "active"
)

// prop value enum
func (o *SetStateBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, setStateBodyTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *SetStateBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("status"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetStateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetStateBody) UnmarshalBinary(b []byte) error {
	var res SetStateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
