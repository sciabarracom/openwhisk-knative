// Code generated by go-swagger; DO NOT EDIT.

package activations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sciabarracom/openwhisk-knative/controller/models"
)

// GetActivationsOKCode is the HTTP code returned for type GetActivationsOK
const GetActivationsOKCode int = 200

/*GetActivationsOK Activations response

swagger:response getActivationsOK
*/
type GetActivationsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.ActivationBrief `json:"body,omitempty"`
}

// NewGetActivationsOK creates GetActivationsOK with default headers values
func NewGetActivationsOK() *GetActivationsOK {

	return &GetActivationsOK{}
}

// WithPayload adds the payload to the get activations o k response
func (o *GetActivationsOK) WithPayload(payload []*models.ActivationBrief) *GetActivationsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get activations o k response
func (o *GetActivationsOK) SetPayload(payload []*models.ActivationBrief) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetActivationsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ActivationBrief, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetActivationsUnauthorizedCode is the HTTP code returned for type GetActivationsUnauthorized
const GetActivationsUnauthorizedCode int = 401

/*GetActivationsUnauthorized Unauthorized request

swagger:response getActivationsUnauthorized
*/
type GetActivationsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetActivationsUnauthorized creates GetActivationsUnauthorized with default headers values
func NewGetActivationsUnauthorized() *GetActivationsUnauthorized {

	return &GetActivationsUnauthorized{}
}

// WithPayload adds the payload to the get activations unauthorized response
func (o *GetActivationsUnauthorized) WithPayload(payload *models.ErrorMessage) *GetActivationsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get activations unauthorized response
func (o *GetActivationsUnauthorized) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetActivationsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetActivationsInternalServerErrorCode is the HTTP code returned for type GetActivationsInternalServerError
const GetActivationsInternalServerErrorCode int = 500

/*GetActivationsInternalServerError Server error

swagger:response getActivationsInternalServerError
*/
type GetActivationsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetActivationsInternalServerError creates GetActivationsInternalServerError with default headers values
func NewGetActivationsInternalServerError() *GetActivationsInternalServerError {

	return &GetActivationsInternalServerError{}
}

// WithPayload adds the payload to the get activations internal server error response
func (o *GetActivationsInternalServerError) WithPayload(payload *models.ErrorMessage) *GetActivationsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get activations internal server error response
func (o *GetActivationsInternalServerError) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetActivationsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
