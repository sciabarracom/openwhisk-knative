// Code generated by go-swagger; DO NOT EDIT.

package namespaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sciabarracom/openwhisk-knative/controller/models"
)

// GetAllNamespacesOKCode is the HTTP code returned for type GetAllNamespacesOK
const GetAllNamespacesOKCode int = 200

/*GetAllNamespacesOK Array of namespaces

swagger:response getAllNamespacesOK
*/
type GetAllNamespacesOK struct {

	/*
	  In: Body
	*/
	Payload []string `json:"body,omitempty"`
}

// NewGetAllNamespacesOK creates GetAllNamespacesOK with default headers values
func NewGetAllNamespacesOK() *GetAllNamespacesOK {

	return &GetAllNamespacesOK{}
}

// WithPayload adds the payload to the get all namespaces o k response
func (o *GetAllNamespacesOK) WithPayload(payload []string) *GetAllNamespacesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all namespaces o k response
func (o *GetAllNamespacesOK) SetPayload(payload []string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllNamespacesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]string, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAllNamespacesUnauthorizedCode is the HTTP code returned for type GetAllNamespacesUnauthorized
const GetAllNamespacesUnauthorizedCode int = 401

/*GetAllNamespacesUnauthorized Unauthorized request

swagger:response getAllNamespacesUnauthorized
*/
type GetAllNamespacesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetAllNamespacesUnauthorized creates GetAllNamespacesUnauthorized with default headers values
func NewGetAllNamespacesUnauthorized() *GetAllNamespacesUnauthorized {

	return &GetAllNamespacesUnauthorized{}
}

// WithPayload adds the payload to the get all namespaces unauthorized response
func (o *GetAllNamespacesUnauthorized) WithPayload(payload *models.ErrorMessage) *GetAllNamespacesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all namespaces unauthorized response
func (o *GetAllNamespacesUnauthorized) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllNamespacesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllNamespacesInternalServerErrorCode is the HTTP code returned for type GetAllNamespacesInternalServerError
const GetAllNamespacesInternalServerErrorCode int = 500

/*GetAllNamespacesInternalServerError Server error

swagger:response getAllNamespacesInternalServerError
*/
type GetAllNamespacesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewGetAllNamespacesInternalServerError creates GetAllNamespacesInternalServerError with default headers values
func NewGetAllNamespacesInternalServerError() *GetAllNamespacesInternalServerError {

	return &GetAllNamespacesInternalServerError{}
}

// WithPayload adds the payload to the get all namespaces internal server error response
func (o *GetAllNamespacesInternalServerError) WithPayload(payload *models.ErrorMessage) *GetAllNamespacesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all namespaces internal server error response
func (o *GetAllNamespacesInternalServerError) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllNamespacesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
