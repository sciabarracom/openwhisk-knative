// Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/sciabarracom/openwhisk-knative/controller/models"
)

// UpdateActionInPackageOKCode is the HTTP code returned for type UpdateActionInPackageOK
const UpdateActionInPackageOKCode int = 200

/*UpdateActionInPackageOK Updated Action

swagger:response updateActionInPackageOK
*/
type UpdateActionInPackageOK struct {

	/*
	  In: Body
	*/
	Payload *models.Action `json:"body,omitempty"`
}

// NewUpdateActionInPackageOK creates UpdateActionInPackageOK with default headers values
func NewUpdateActionInPackageOK() *UpdateActionInPackageOK {

	return &UpdateActionInPackageOK{}
}

// WithPayload adds the payload to the update action in package o k response
func (o *UpdateActionInPackageOK) WithPayload(payload *models.Action) *UpdateActionInPackageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action in package o k response
func (o *UpdateActionInPackageOK) SetPayload(payload *models.Action) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionInPackageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionInPackageBadRequestCode is the HTTP code returned for type UpdateActionInPackageBadRequest
const UpdateActionInPackageBadRequestCode int = 400

/*UpdateActionInPackageBadRequest Bad request

swagger:response updateActionInPackageBadRequest
*/
type UpdateActionInPackageBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionInPackageBadRequest creates UpdateActionInPackageBadRequest with default headers values
func NewUpdateActionInPackageBadRequest() *UpdateActionInPackageBadRequest {

	return &UpdateActionInPackageBadRequest{}
}

// WithPayload adds the payload to the update action in package bad request response
func (o *UpdateActionInPackageBadRequest) WithPayload(payload *models.ErrorMessage) *UpdateActionInPackageBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action in package bad request response
func (o *UpdateActionInPackageBadRequest) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionInPackageBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionInPackageUnauthorizedCode is the HTTP code returned for type UpdateActionInPackageUnauthorized
const UpdateActionInPackageUnauthorizedCode int = 401

/*UpdateActionInPackageUnauthorized Unauthorized request

swagger:response updateActionInPackageUnauthorized
*/
type UpdateActionInPackageUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionInPackageUnauthorized creates UpdateActionInPackageUnauthorized with default headers values
func NewUpdateActionInPackageUnauthorized() *UpdateActionInPackageUnauthorized {

	return &UpdateActionInPackageUnauthorized{}
}

// WithPayload adds the payload to the update action in package unauthorized response
func (o *UpdateActionInPackageUnauthorized) WithPayload(payload *models.ErrorMessage) *UpdateActionInPackageUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action in package unauthorized response
func (o *UpdateActionInPackageUnauthorized) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionInPackageUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionInPackageForbiddenCode is the HTTP code returned for type UpdateActionInPackageForbidden
const UpdateActionInPackageForbiddenCode int = 403

/*UpdateActionInPackageForbidden Unauthorized request

swagger:response updateActionInPackageForbidden
*/
type UpdateActionInPackageForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionInPackageForbidden creates UpdateActionInPackageForbidden with default headers values
func NewUpdateActionInPackageForbidden() *UpdateActionInPackageForbidden {

	return &UpdateActionInPackageForbidden{}
}

// WithPayload adds the payload to the update action in package forbidden response
func (o *UpdateActionInPackageForbidden) WithPayload(payload *models.ErrorMessage) *UpdateActionInPackageForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action in package forbidden response
func (o *UpdateActionInPackageForbidden) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionInPackageForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionInPackageConflictCode is the HTTP code returned for type UpdateActionInPackageConflict
const UpdateActionInPackageConflictCode int = 409

/*UpdateActionInPackageConflict Conflicting item already exists

swagger:response updateActionInPackageConflict
*/
type UpdateActionInPackageConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionInPackageConflict creates UpdateActionInPackageConflict with default headers values
func NewUpdateActionInPackageConflict() *UpdateActionInPackageConflict {

	return &UpdateActionInPackageConflict{}
}

// WithPayload adds the payload to the update action in package conflict response
func (o *UpdateActionInPackageConflict) WithPayload(payload *models.ErrorMessage) *UpdateActionInPackageConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action in package conflict response
func (o *UpdateActionInPackageConflict) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionInPackageConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionInPackageRequestEntityTooLargeCode is the HTTP code returned for type UpdateActionInPackageRequestEntityTooLarge
const UpdateActionInPackageRequestEntityTooLargeCode int = 413

/*UpdateActionInPackageRequestEntityTooLarge Request entity too large

swagger:response updateActionInPackageRequestEntityTooLarge
*/
type UpdateActionInPackageRequestEntityTooLarge struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionInPackageRequestEntityTooLarge creates UpdateActionInPackageRequestEntityTooLarge with default headers values
func NewUpdateActionInPackageRequestEntityTooLarge() *UpdateActionInPackageRequestEntityTooLarge {

	return &UpdateActionInPackageRequestEntityTooLarge{}
}

// WithPayload adds the payload to the update action in package request entity too large response
func (o *UpdateActionInPackageRequestEntityTooLarge) WithPayload(payload *models.ErrorMessage) *UpdateActionInPackageRequestEntityTooLarge {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action in package request entity too large response
func (o *UpdateActionInPackageRequestEntityTooLarge) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionInPackageRequestEntityTooLarge) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(413)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateActionInPackageInternalServerErrorCode is the HTTP code returned for type UpdateActionInPackageInternalServerError
const UpdateActionInPackageInternalServerErrorCode int = 500

/*UpdateActionInPackageInternalServerError Server error

swagger:response updateActionInPackageInternalServerError
*/
type UpdateActionInPackageInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorMessage `json:"body,omitempty"`
}

// NewUpdateActionInPackageInternalServerError creates UpdateActionInPackageInternalServerError with default headers values
func NewUpdateActionInPackageInternalServerError() *UpdateActionInPackageInternalServerError {

	return &UpdateActionInPackageInternalServerError{}
}

// WithPayload adds the payload to the update action in package internal server error response
func (o *UpdateActionInPackageInternalServerError) WithPayload(payload *models.ErrorMessage) *UpdateActionInPackageInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update action in package internal server error response
func (o *UpdateActionInPackageInternalServerError) SetPayload(payload *models.ErrorMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateActionInPackageInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
